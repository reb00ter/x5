# Generated by Django 2.1.5 on 2019-09-22 14:15
from datetime import datetime, timedelta
import random

from faker import Faker
from django.db import migrations


def init_free(apps, schema_editor):
    fake = Faker('ru_RU')
    ContainerType = apps.get_model('boxes', 'ContainerType')
    FreeContainer = apps.get_model('boxes', 'FreeContainer')
    User = apps.get_model('core', 'User')
    Station = apps.get_model('geo', 'Station')
    containers = []
    users = User.objects.all()[:User.objects.count()/2]
    start_date = datetime.now()+timedelta(days=random.randint(2, 20))
    while len(containers) < random.randint(20, 60):
        containers.append(FreeContainer(
            type=ContainerType.objects.order_by('?').first(),
            location=Station.objects.order_by('?').first(),
            address=fake.address(),
            count=random.randint(2, 20),
            date_from=start_date,
            date_till=start_date+timedelta(days=random.randint(2, 20)),
            owner=users[random.randint(0, len(users)-1)],
            parts=random.randint(1, 20) > 10,
            price=random.randint(1, 5)*100000
        ))
    FreeContainer.objects.bulk_create(containers)


def init_needed(apps, schema_editor):
    fake = Faker('ru_RU')
    ContainerType = apps.get_model('boxes', 'ContainerType')
    NeededContainer = apps.get_model('boxes', 'NeededContainer')
    User = apps.get_model('core', 'User')
    Station = apps.get_model('geo', 'Station')
    containers = []
    users = User.objects.all()[User.objects.count()/2:]
    start_date = datetime.now()+timedelta(days=random.randint(2, 20))
    while len(containers) < random.randint(20, 60):
        containers.append(NeededContainer(
            type=ContainerType.objects.order_by('?').first(),
            location=Station.objects.order_by('?').first(),
            address=fake.address(),
            count=random.randint(2, 20),
            date_from=start_date,
            date_till=start_date+timedelta(days=random.randint(2, 20)),
            owner=users[random.randint(0, len(users)-1)],
        ))
    NeededContainer.objects.bulk_create(containers)


class Migration(migrations.Migration):

    dependencies = [
        ('boxes', '0007_auto_20190921_2043'),
        ('core', '0002_auto_20190921_2043'),
        ('geo', '0004_initial_data'),
    ]

    operations = [
        migrations.RunPython(init_free),
        migrations.RunPython(init_needed),
    ]
